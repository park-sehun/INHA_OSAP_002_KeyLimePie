        -:    0:Source:/home/jihwan/KeyLimePie/ossavltree/set.cc
        -:    0:Graph:set.cc.gcno
        -:    0:Data:set.cc.gcda
        -:    0:Runs:3
        -:    1: /*
        -:    2:BSD-3-Clause
        -:    3:Copyright (c) 2023, Jihwan Kim
        -:    4:All rights reserved.
        -:    5: 
        -:    6:Redistribution and use in source and binary forms, with or without
        -:    7:modification, are permitted provided that the following conditions are met:
        -:    8: 
        -:    9:* Redistributions of source code must retain the above copyright
        -:   10:notice, this list of conditions and the following disclaimer.
        -:   11:* Redistributions in binary form must reproduce the above copyright
        -:   12:notice, this list of conditions and the following disclaimer in the
        -:   13:documentation and/or other materials provided with the distribution.
        -:   14:* Neither the name of the <organization> nor the
        -:   15:names of its contributors may be used to endorse or promote products
        -:   16:derived from this software without specific prior written permission.
        -:   17: 
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL Jihwan Kim Yun BE LIABLE FOR ANY
        -:   22:DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
        -:   25:ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:
        -:   29:작성자 : 김지환
        -:   30:작성일 : 2023년 12월 13일
        -:   31:*/
        -:   32: #include "set.h"
        -:   33: 
      531:   34: Int_AVLtree_set::Int_AVLtree_set()
        -:   35:    {
      531:   36:        AVLtree_Int_ds_creator ds_creator;
      531:   37:        DataStructure = (Int_AVLtree *)ds_creator.Create_Ds();
      531:   38:    }
        -:   39:
      117:   40:    std::pair<int,int> Int_AVLtree_set::Minimum(int x) // key값이 x인 노드가 루트인 서브트리에서의 최소 key를 가지는 노드의 key와 depth를 출력하는 함수
        -:   41:    {
      117:   42:        return DataStructure->Minimum(x);
        -:   43:    }
      123:   44:    std::pair<int,int> Int_AVLtree_set::Maximum(int x) // key값이 x인 노드가 루트인 서브트리에서의 최대 key를 가지는 노드의 key와 depth를 출력하는 함수
        -:   45:    {
      123:   46:        return DataStructure->Maximum(x);
        -:   47:    }
      132:   48:    int Int_AVLtree_set::Find(int x) // key 값이 x인 노드의 depth를 출력하는 함수
        -:   49:    {
      132:   50:        return DataStructure->Find(x);
        -:   51:    }
    17691:   52:    int Int_AVLtree_set::Insert(int x) // key값이 x인 노드를 삽입하는 함수
        -:   53:    {
    17691:   54:        return DataStructure->Insert(x);
        -:   55:    }
      126:   56:    std::pair<int,int> Int_AVLtree_set::Rank(int x) // key값이 x인 노드의 depth와 rank를 출력하는 함수
        -:   57:    {
      126:   58:        return DataStructure->Rank(x);
        -:   59:    }
      120:   60:    int Int_AVLtree_set::Erase(int x) // key값이 x인 노드를 삭제하는 함수
        -:   61:    {
      120:   62:        return DataStructure->Erase(x);
        -:   63:    }
        6:   64:    bool Int_AVLtree_set::Empty() // tree가 비어있는지를 출력하는 함수
        -:   65:    {
        6:   66:        return DataStructure->Empty();
        -:   67:    }
       12:   68:    int Int_AVLtree_set::Size() // tree의 크기를 출력하는 함수
        -:   69:    {
       12:   70:        return DataStructure->Size();
        -:   71:    }
