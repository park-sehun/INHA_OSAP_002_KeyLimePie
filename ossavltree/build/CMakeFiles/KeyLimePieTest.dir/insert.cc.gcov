        -:    0:Source:/home/jihwan/KeyLimePie/ossavltree/insert.cc
        -:    0:Graph:insert.cc.gcno
        -:    0:Data:insert.cc.gcda
        -:    0:Runs:3
        -:    1:/*
        -:    2:BSD-3-Clause
        -:    3:Copyright (c) 2023, Beongchul Yun
        -:    4:All rights reserved.
        -:    5:
        -:    6:Redistribution and use in source and binary forms, with or without
        -:    7:modification, are permitted provided that the following conditions are met:
        -:    8:
        -:    9:* Redistributions of source code must retain the above copyright
        -:   10:notice, this list of conditions and the following disclaimer.
        -:   11:* Redistributions in binary form must reproduce the above copyright
        -:   12:notice, this list of conditions and the following disclaimer in the
        -:   13:documentation and/or other materials provided with the distribution.
        -:   14:* Neither the name of the <organization> nor the
        -:   15:names of its contributors may be used to endorse or promote products
        -:   16:derived from this software without specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL Beongchul Yun BE LIABLE FOR ANY
        -:   22:DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
        -:   25:ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:
        -:   29:작성자 : 윤병철
        -:   30:작성일 : 2023년 11월 14일
        -:   31:*/
        -:   32:#include "data_structure.h"
        -:   33:
    17691:   34:int Int_AVLtree::Insert(int x) // key값이 x인 노드를 삽입하는 함수
        -:   35:{
    17691:   36:    AVLtree_Int_node_creator node_creator;
    17691:   37:    Int_AVLtree_Node *new_node = (Int_AVLtree_Node *)node_creator.CreateNode(x); // 새로운 노드 생성
    17691:   38:    if (getNode_num() == 0)                                                      // tree가 비어있을 때
        -:   39:    {
      519:   40:        setRoot(new_node);
      519:   41:        setNode_num(getNode_num() + 1);
      519:   42:        return getDepth(new_node);
        -:   43:    }
        -:   44:
    17172:   45:    Int_AVLtree_Node *current_node = getRoot(); // new_node가 삽일될 노드
    17172:   46:    Int_AVLtree_Node *parent_node = NULL;       // 부모 노드가 될 노드
    17172:   47:    int child_factor = 0;                       // 왼쪽 자식 노드인지 오른쪽 자식 노드인지 결정하는 인자
        -:   48:
    93219:   49:    while (current_node != NULL)
        -:   50:    {
    76050:   51:        parent_node = current_node;
    76050:   52:        if (current_node->getKey_() > x) // current_node key가 x보다 클 때
        -:   53:        {
      159:   54:            current_node = current_node->getLeft_child();
      159:   55:            child_factor = -1;
        -:   56:        }
    75891:   57:        else if (current_node->getKey_() < x) // current_node key가 x보다 작을 때
        -:   58:        {
    75888:   59:            current_node = current_node->getRight_child();
    75888:   60:            child_factor = 1;
        -:   61:        }
        3:   62:        else if (current_node->getKey_() == x) // x를 key값으로 가지는 노드가 이미 존재할 때
        -:   63:        {
        3:   64:            return -1;
        -:   65:        }
        -:   66:    }
        -:   67:
    17169:   68:    new_node->setParent_node(parent_node);
        -:   69:
    17169:   70:    if (child_factor == -1) // 왼쪽 자식 노드일 경우
        -:   71:    {
       96:   72:        parent_node->setLeft_child(new_node);
        -:   73:    }
    17073:   74:    else if (child_factor == 1) // 오른쪽 자식 노드일 경우
        -:   75:    {
    17073:   76:        parent_node->setRight_child(new_node);
        -:   77:    }
        -:   78:    else // 에러가 일어났을 경우
        -:   79:    {
    #####:   80:        return -1;
        -:   81:    }
    17169:   82:    setNode_num(getNode_num() + 1);
    17169:   83:    UpdateLeftSubtreeSize(new_node, 1);
    17169:   84:    setHeight(new_node);
    17169:   85:    Balance(new_node, true);
    17169:   86:    return getDepth(new_node);
        -:   87:}
